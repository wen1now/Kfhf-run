title Jailbreak
author TGE, W1N & BBQ
homepage www.puzzlescript.net

========
OBJECTS
========

Background 
lightgrey 

Exit
green

Wall 
grey

black_check_left
brown

black_check_up
brown

black_check_down
brown

black_check_right
brown

black_check_left1
brown

black_check_up1
brown

black_check_down1
brown

black_check_right1
brown

Shadow
grey

Player
red
.....
.....
..0..
.....
.....

black_b
black
.....
.000.
.000.
.000.
.....

dead
red lightgrey
.....
.010.
.101.
.010.
.....

Enemy_black
Black lightgrey
01110
10101
11011
10101
01110

Enemy_black1
Black lightgrey
01110
10101
11011
10101
01110

Enemy_black2
Black lightgrey
01110
10101
11011
10101
01110


=======
LEGEND
=======

. = Background
b = black_b
# = Wall
- = exit
P = Player and black_b
x = Enemy_black
unseeable = enemy_black or wall or black_b
enemies = enemy_black
blocks = black_b
blockade = wall or black_b
black_object = black_b
black_check = black_check_up or black_check_left or black_check_down or black_check_right or black_check_up1 or black_check_left1 or black_check_down1 or black_check_right1
black_checkxr1 = black_check_up or black_check_left or black_check_down or black_check_right or black_check_up1 or black_check_left1 or black_check_down1
black_checkxl1 = black_check_up or black_check_left or black_check_down or black_check_right or black_check_up1 or black_check_down1 or black_check_right1
black_checkxd1 = black_check_up or black_check_left or black_check_down or black_check_right or black_check_up1 or black_check_left1 or black_check_right1
black_checkxu1 = black_check_up or black_check_left or black_check_down or black_check_right or black_check_left1 or black_check_down1 or black_check_right1

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
exit
shadow
enemy_black, enemy_black1, enemy_black2
Wall, Player
black_check_up
black_check_left
black_check_down
black_check_right
black_check_up1
black_check_left1
black_check_down1
black_check_right1
black_b,dead

======
RULES     
======    
[ > Player dead] -> CANCEL
[ > Player | enemy_black] -> CANCEL
[ > Player black_b] -> [ > Player > black_b ]
[ > Player | black_b] -> [ > Player |> black_b ]
[ Player ] -> [ Player Shadow ]

(begin raycasting code)
(substitute black with any other colour to work for another colour)
(depends on black_object, black_check{xr1/xl1/xd1/xu1} [and black_check_{right/left/down/up{1}} objects], unseeable [impenetrable object], enemy_black{1/2} and blockade [subset of unseeable for 'harmless diffusing objects'])

(generates rays)
late [black_object] -> [black_object black_check_right black_check_left black_check_down black_check_up]

(projects rays out, unless they bump into an unseeable object)
late right [black_object|...|black_check_right .|. no unseeable] -> [black_object|...|.|black_check_right .]
+late left [black_object|...|black_check_left .|. no unseeable] -> [black_object|...|.|black_check_left .]
+late down [black_object|...|black_check_down .|. no unseeable] -> [black_object|...|.|black_check_down .]
+late up [black_object|...|black_check_up .|. no unseeable] -> [black_object|...|.|black_check_up .]
+late right [black_object black_check_right .|. no unseeable] -> [black_object .|black_check_right .]
+late left [black_object black_check_left .|. no unseeable] -> [black_object .|black_check_left .]
+late down [black_object black_check_down .|. no unseeable] -> [black_object .|black_check_down .]
+late up [black_object black_check_up .|. no unseeable] -> [black_object .|black_check_up .]

(removes rays that have hit a blockade [i.e. not an enemy])
late right [black_object|...|black_check_right .|blockade .] -> [black_object|...|.|blockade .]
+late left [black_object|...|black_check_left .|blockade .] -> [black_object|...|.|blockade .]
+late down [black_object|...|black_check_down .|blockade .] -> [black_object|...|.|blockade .]
+late up [black_object|...|black_check_up .|blockade .] -> [black_object|...|.|blockade .]
+late right [black_object black_check_right .|blockade .] -> [black_object .|blockade .]
+late left [black_object black_check_left .|blockade .] -> [black_object .|blockade .]
+late down [black_object black_check_down .|blockade .] -> [black_object .|blockade .]
+late up [black_object black_check_up .|blockade .] -> [black_object .|blockade .]

(Does a few things:
 a. counts the number of rays pointing to each enemy [up to a maximum of 2, which means don't move]
 b. if the ray is pointing to an enemy which is at 2, prunes it
)
late right [black_object|...|black_check_right .|enemy_black] -> [black_object|...|black_check_right1 .|enemy_black1]
+late right [black_object|...|black_check_right .|enemy_black1] -> [black_object|...|.|enemy_black2]
+late left [black_object|...|black_check_left .|enemy_black] -> [black_object|...|black_check_left1 .|enemy_black1]
+late left [black_object|...|black_check_left .|enemy_black1] -> [black_object|...|.|enemy_black2]
+late down [black_object|...|black_check_down .|enemy_black] -> [black_object|...|black_check_down1 .|enemy_black1]
+late down [black_object|...|black_check_down .|enemy_black1] -> [black_object|...|.|enemy_black2]
+late up [black_object|...|black_check_up .|enemy_black] -> [black_object|...|black_check_up1 .|enemy_black1]
+late up [black_object|...|black_check_up .|enemy_black1] -> [black_object|...|.|enemy_black2]
+late right [black_object black_check_right .|enemy_black] -> [black_object black_check_right1 .|enemy_black1]
+late right [black_object black_check_right .|enemy_black1] -> [black_object .|enemy_black2]
+late left [black_object black_check_left .|enemy_black] -> [black_object black_check_left1 .|enemy_black1]
+late left [black_object black_check_left .|enemy_black1] -> [black_object .|enemy_black2]
+late down [black_object black_check_down .|enemy_black] -> [black_object black_check_down1 .|enemy_black1]
+late down [black_object black_check_down .|enemy_black1] -> [black_object .|enemy_black2]
+late up [black_object black_check_up .|enemy_black] -> [black_object black_check_up1 .|enemy_black1]
+late up [black_object black_check_up .|enemy_black1] -> [black_object .|enemy_black2]
+late right [black_object|...|black_check_right .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late right [black_object|...|black_check_right1 .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late left [black_object|...|black_check_left .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late left [black_object|...|black_check_left1 .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late down [black_object|...|black_check_down .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late down [black_object|...|black_check_down1 .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late up [black_object|...|black_check_up .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late up [black_object|...|black_check_up1 .|enemy_black2] -> [black_object|...|.|enemy_black2]
+late right [black_object black_check_right1 .|enemy_black2] -> [black_object .|enemy_black2]
+late left [black_object black_check_left .|enemy_black2] -> [black_object .|enemy_black2]
+late left [black_object black_check_left1 .|enemy_black2] -> [black_object .|enemy_black2]
+late down [black_object black_check_down .|enemy_black2] -> [black_object .|enemy_black2]
+late down [black_object black_check_down1 .|enemy_black2] -> [black_object .|enemy_black2]
+late up [black_object black_check_up .|enemy_black2] -> [black_object .|enemy_black2]
+late up [black_object black_check_up1 .|enemy_black2] -> [black_object .|enemy_black2]

(If a black object that has exactly one ray pointing to it, moves it there iff it's the only ray in that square, else doesn't move because of the conflict)
late right [black_object|...|black_check_right1 . no black_checkxr1|enemy_black1 .] -> [black_object|...|. enemy_black2|.]
+late left [black_object|...|black_check_left1 . no black_checkxl1|enemy_black1 .] -> [black_object|...|. enemy_black2|.]
+late down [black_object|...|black_check_down1 . no black_checkxd1|enemy_black1 .] -> [black_object|...|. enemy_black2|.]
+late up [black_object|...|black_check_up1 . no black_checkxu1|enemy_black1 .] -> [black_object|...|. enemy_black2|.]
+late right [black_object black_check_right1 . no black_checkxr1|enemy_black1 .] -> [black_object . enemy_black2|.]
+late left [black_object black_check_left1 . no black_checkxl1|enemy_black1 .] -> [black_object . enemy_black2|.]
+late down [black_object black_check_down1 . no black_checkxd1|enemy_black1 .] -> [black_object . enemy_black2|.]
+late up [black_object black_check_up1 . no black_checkxu1|enemy_black1 .] -> [black_object . enemy_black2|.]

(cleans up)
late [black_check] -> []
late [enemy_black2] -> [enemy_black]
late [enemy_black1] -> [enemy_black]

(end ray-casting code)

late [Player Shadow] -> CANCEL
late [shadow] -> []
late [Player black_b enemy_black] -> [Player dead]


==============
WINCONDITIONS
==============
All player on exit

=======     
LEVELS
=======

(test levels here)

message Act I: Prison cell

message Avoid the crosses

message Make it to the exit
message Level 1: Single cell
#######
#P....-
#....x#
#.....#
##...##
#######
message Level 2: Two cell

############
#P...#.....#
#.........x#
#...x#...#.#
#.........x#
#....#.....#
######-#####

message Level 3: Avoidance

############
#P...#.....#
#....#...x.#
#..x......x#
#....#.....#
###.##.....#
###.###.#.##
#..........#
-..x.......#
#x.........#
#..........#
#...x..x.x.#
############

message Level 4: Dash

######
#P...-
#...x#
#..x.#
#....#
######

message Level 5: Kerfuffle

#######
#P....#
#....x#
#....x#
#.....-
#######

message Level 6: Interference

#############
#####.......#
#x.........x#
###P#......x#
#x.........x#
#####....x..-
#############

message CONGRATULATIONS! You have won...

